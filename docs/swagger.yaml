basePath: /api/v1
definitions:
  github_com_minacio00_easyCourt_internal_model.APIError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  github_com_minacio00_easyCourt_internal_model.Booking:
    properties:
      booking_date:
        description: Date of the booking
        type: string
      id:
        type: integer
      omitempty:
        $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Timeslot'
      opponent_name:
        type: string
      opponent_partner:
        type: string
      partner_name:
        type: string
      singles_flag:
        type: boolean
      timeslot_id:
        type: integer
      user:
        $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.User'
      user_id:
        type: integer
    type: object
  github_com_minacio00_easyCourt_internal_model.Court:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      location:
        $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Location'
      location_id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  github_com_minacio00_easyCourt_internal_model.CreateBooking:
    properties:
      opponent_name:
        type: string
      opponent_partner:
        type: string
      partner_name:
        type: string
      singles_flag:
        type: boolean
      timeslot_id:
        type: integer
      user_id:
        type: integer
    type: object
  github_com_minacio00_easyCourt_internal_model.CreateLocation:
    properties:
      location_name:
        type: string
    type: object
  github_com_minacio00_easyCourt_internal_model.CreateTimeslot:
    properties:
      court_id:
        type: integer
      end_time:
        type: string
      is_active:
        type: boolean
      start_time:
        type: string
      week_day:
        $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Weekday'
    type: object
  github_com_minacio00_easyCourt_internal_model.CreateUser:
    properties:
      email:
        type: string
      id:
        type: integer
      lastName:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
    type: object
  github_com_minacio00_easyCourt_internal_model.Location:
    properties:
      allowAppPayments:
        type: boolean
      id:
        type: integer
      image_url:
        type: string
      location_name:
        type: string
      paymentDescription:
        type: string
      pix:
        type: string
    type: object
  github_com_minacio00_easyCourt_internal_model.ReadBooking:
    properties:
      booking_date:
        type: string
      id:
        type: integer
      opponent_name:
        type: string
      opponent_partner:
        type: string
      partner_name:
        type: string
      singles_flag:
        type: boolean
      timeslot:
        $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.ReadTimeslot'
      timeslot_id:
        type: integer
      user:
        $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.User'
      user_id:
        type: integer
    type: object
  github_com_minacio00_easyCourt_internal_model.ReadTimeslot:
    properties:
      booking:
        $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.ReadBooking'
      court:
        $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Court'
      court_id:
        type: integer
      end_time:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      start_time:
        type: string
      week_day:
        $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Weekday'
    type: object
  github_com_minacio00_easyCourt_internal_model.Timeslot:
    properties:
      booking:
        $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Booking'
      court:
        $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Court'
      court_id:
        type: integer
      end_time:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      start_time:
        type: string
      week_day:
        $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Weekday'
    type: object
  github_com_minacio00_easyCourt_internal_model.User:
    properties:
      email:
        type: string
      id:
        type: integer
      isAdmin:
        type: boolean
      lastName:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  github_com_minacio00_easyCourt_internal_model.Weekday:
    enum:
    - Domingo
    - Segunda-feira
    - Terça-feira
    - Quarta-feira
    - Quinta-feira
    - Sexta-feira
    - Sábado
    type: string
    x-enum-varnames:
    - Domingo
    - SegundaFeira
    - TercaFeira
    - QuartaFeira
    - QuintaFeira
    - SextaFeira
    - Sabado
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  internal_handler.Credentials:
    properties:
      password:
        type: string
      phone:
        type: string
    type: object
  internal_handler.Refresh:
    properties:
      refresh_token:
        type: string
    type: object
info:
  contact: {}
  description: This is a comprehensive API for the EasyCourt system.
  title: EasyCourt API
  version: "1.0"
paths:
  /bookings:
    get:
      consumes:
      - application/json
      description: Retrieves all bookings with pagination support
      parameters:
      - default: 10
        description: Number of bookings to retrieve
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset of bookings
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.ReadBooking'
            type: array
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get all bookings
      tags:
      - bookings
    post:
      consumes:
      - application/json
      description: Creates a new booking based on the provided payload
      parameters:
      - description: Booking Data
        in: body
        name: booking
        required: true
        schema:
          $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.CreateBooking'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Booking'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create a new booking
      tags:
      - bookings
  /bookings/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a booking by its ID
      parameters:
      - description: Booking ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Booking not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Delete a booking
      tags:
      - bookings
    get:
      consumes:
      - application/json
      description: Retrieves a specific booking by its ID
      parameters:
      - description: Booking ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Booking'
        "404":
          description: Booking not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get booking by ID
      tags:
      - bookings
    put:
      consumes:
      - application/json
      description: Updates an existing booking based on the provided payload
      parameters:
      - description: Booking ID
        in: path
        name: id
        required: true
        type: integer
      - description: Booking Data
        in: body
        name: booking
        required: true
        schema:
          $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.CreateBooking'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Booking'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "404":
          description: Booking not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update a booking
      tags:
      - bookings
  /bookings/reset:
    delete:
      consumes:
      - application/json
      description: Delete all the bookings
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Delete all the bookings
      tags:
      - bookings
  /courts:
    get:
      description: Retrieves all courts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Court'
            type: array
        "500":
          description: Failed to fetch courts
          schema:
            type: string
      summary: Get all courts
      tags:
      - court
    post:
      consumes:
      - application/json
      description: Creates a new court with the provided data
      parameters:
      - description: Court data
        in: body
        name: court
        required: true
        schema:
          $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Court'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Failed to create court
          schema:
            type: string
      summary: Create a new court
      tags:
      - court
    put:
      consumes:
      - application/json
      description: Updates the data of an existing court
      parameters:
      - description: Court data
        in: body
        name: court
        required: true
        schema:
          $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Court'
      responses:
        "200":
          description: OK
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Failed to update court
          schema:
            type: string
      summary: Update an existing court
      tags:
      - court
  /courts/{id}:
    delete:
      description: Deletes a court based on the given ID
      parameters:
      - description: Court ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid court ID
          schema:
            type: string
        "500":
          description: Failed to delete court
          schema:
            type: string
      summary: Delete a court by ID
      tags:
      - court
    get:
      description: Retrieves a court by its ID
      parameters:
      - description: Court ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Court'
        "400":
          description: Invalid court ID
          schema:
            type: string
        "404":
          description: Court not found
          schema:
            type: string
      summary: Get court by ID
      tags:
      - court
  /courts/by-location:
    get:
      consumes:
      - application/json
      description: Retrieves all the courts from a location.
      parameters:
      - description: ID of the location
        in: query
        name: location_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Court information
          schema:
            items:
              $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Court'
            type: array
        "400":
          description: Error message
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Error message
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get courts by location ID
      tags:
      - court
  /location:
    get:
      description: Get a list of all locations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Location'
            type: array
        "204":
          description: No Content
          schema:
            type: string
      summary: Get all locations
      tags:
      - location
    post:
      consumes:
      - application/json
      description: Create a new location with the provided information
      parameters:
      - description: Location data
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.CreateLocation'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Location'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.APIError'
      summary: Create a new location
      tags:
      - location
    put:
      consumes:
      - application/json
      description: Update the details of a location
      parameters:
      - description: Updated location data
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Location'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.APIError'
      summary: Update a location
      tags:
      - location
  /location/{id}:
    delete:
      description: Delete a location by its ID
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.APIError'
      summary: Delete a location by ID
      tags:
      - location
  /location/{id}/image:
    post:
      consumes:
      - multipart/form-data
      description: Upload an image file for a specific location and store it in S3
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      - description: Image file to upload
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Returns a success message and the URL of the uploaded image
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.APIError'
        "404":
          description: Location not found
          schema:
            $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.APIError'
      summary: Upload a location image
      tags:
      - location
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return access and refresh tokens
      parameters:
      - description: Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/internal_handler.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.APIError'
      summary: User login
      tags:
      - authentication
  /refresh:
    post:
      consumes:
      - application/json
      description: Use a refresh token to obtain a new access token and refresh token
        pair
      parameters:
      - description: Refresh Token
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/internal_handler.Refresh'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.APIError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.APIError'
      summary: Refresh access token
      tags:
      - authentication
  /timeslots:
    get:
      description: Retrieves all timeslots
      produces:
      - application/json
      responses:
        "200":
          description: List of timeslots
          schema:
            items:
              $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Timeslot'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all timeslots
      tags:
      - Timeslots
    post:
      consumes:
      - application/json
      description: Creates a new timeslot in the system
      parameters:
      - description: Timeslot data
        in: body
        name: timeslot
        required: true
        schema:
          $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.CreateTimeslot'
      produces:
      - application/json
      responses:
        "201":
          description: Timeslot created successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input data
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new timeslot
      tags:
      - Timeslots
  /timeslots/{id}:
    delete:
      description: Deletes a timeslot by its ID
      parameters:
      - description: Timeslot ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Timeslot deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid ID supplied
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a timeslot
      tags:
      - Timeslots
    get:
      description: Retrieves a single timeslot by its ID
      parameters:
      - description: Timeslot ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Timeslot data
          schema:
            $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Timeslot'
        "400":
          description: Invalid ID supplied
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Timeslot not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get timeslot by ID
      tags:
      - Timeslots
    put:
      consumes:
      - application/json
      description: Updates the details of an existing timeslot
      parameters:
      - description: Timeslot ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated timeslot data
        in: body
        name: timeslot
        required: true
        schema:
          $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.CreateTimeslot'
      produces:
      - application/json
      responses:
        "200":
          description: Timeslot updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input or ID
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a timeslot
      tags:
      - Timeslots
  /timeslots/active:
    get:
      description: Retrieves all active timeslots
      produces:
      - application/json
      responses:
        "200":
          description: List of active timeslots
          schema:
            items:
              $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Timeslot'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get active timeslots
      tags:
      - Timeslots
  /timeslots/by-court:
    get:
      description: Retrieves all timeslots for a specific court
      parameters:
      - description: Court ID
        in: query
        name: court_id
        required: true
        type: integer
      - description: Weekday filter
        in: query
        name: day
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of timeslots for the court
          schema:
            items:
              $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.Timeslot'
            type: array
        "204":
          description: No Content
        "400":
          description: Invalid court ID
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get timeslots by court
      tags:
      - Timeslots
  /users:
    get:
      description: Get a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.User'
            type: array
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.APIError'
      summary: Create a new user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the details of a user
      parameters:
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.User'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.APIError'
      summary: Update a user
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.APIError'
      summary: Delete a user by ID
      tags:
      - users
    get:
      description: Get details of a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_minacio00_easyCourt_internal_model.APIError'
      summary: Get a user by ID
      tags:
      - users
swagger: "2.0"
